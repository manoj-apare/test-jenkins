diff --git a/docroot/modules/contrib/commerce/modules/order/src/Entity/Order.php b/docroot/modules/contrib/commerce/modules/order/src/Entity/Order.php
index ccfe4f4..f75d28d 100644
--- a/docroot/modules/contrib/commerce/modules/order/src/Entity/Order.php
+++ b/docroot/modules/contrib/commerce/modules/order/src/Entity/Order.php
@@ -3,6 +3,8 @@
 namespace Drupal\commerce_order\Entity;
 
 use Drupal\commerce_order\Adjustment;
+use Drupal\commerce_price\Price;
+use Drupal\commerce_product\Plugin\Commerce\PromotionOffer\ProductQuantityPercentageOff;
 use Drupal\commerce_store\Entity\StoreInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
@@ -13,10 +15,8 @@
 use Drupal\profile\Entity\ProfileInterface;
 use Drupal\commerce_promotion\Entity\Coupon;
 use Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer\PromotionOfferBase;
-use Drupal\commerce_price\Price;
 use Drupal\commerce_product\Entity\ProductVariation;
-use Drupal\commerce_product\Plugin\Commerce\PromotionOffer\ProductFixedOff;
-use Drupal\commerce_product\Plugin\Commerce\PromotionOffer\ProductPercentageOff;
+use Drupal\commerce_product\Plugin\Commerce\PromotionOffer\ProductQuantityFixedOff;
 use Drupal\commerce_promotion\Entity\Promotion;
 
 /**
@@ -326,130 +326,71 @@ public function collectAdjustments() {
     $adjustments = [];
     foreach ($this->getItems() as $order_item) {
       foreach ($order_item->getAdjustments() as $adjustment) {
-
         // Code written for Custom Quantity field in Coupons.
-        if (!empty($this->get('coupons')->target_id)) {
+        if (!empty($this->get('coupons')->target_id) && $adjustment->getType() != 'cypress_cart_rules' && $adjustment->getType() != 'cypress_promocode') {
           $coupon_id = $this->get('coupons')->target_id;
           $coupon = Coupon::load($coupon_id);
           // Order item adjustments apply to the unit price, they
           // must be multiplied by quantity before they are used.
-
           $purchased_entity = $order_item->getPurchasedEntityId();
           $pro_var_id = ProductVariation::load($purchased_entity);
-          $product_id = $pro_var_id->getProductId();
-
-          //get the product id from respective promotion
+         // $product_id = $pro_var_id->getProductId();
+         // get the product id from respective promotion
           $promotion_id = $coupon->getPromotionId();
           $promotion = Promotion::load($promotion_id);
           $offer = $promotion->offer->first()->getTargetInstance();
-          if ($offer instanceof ProductPercentageOff) {
+          if ($offer instanceof ProductQuantityPercentageOff) {
             $config = $offer->getConfiguration();
-            $offer_product_id = $config['product_id'];
             $cart_quantity = $order_item->getQuantity();
-            if (!empty($coupon->getPromocodeQuantity())) {
-              $coupon_quantity = $coupon->getPromocodeQuantity();
-              if ($product_id == $offer_product_id) {
-                if ($coupon_quantity == 0) {
-                  $multiplied_adjustment = new Adjustment([
-                    'type' => $adjustment->getType(),
-                    'label' => $adjustment->getLabel(),
-                    'source_id' => $adjustment->getSourceId(),
-                    'amount' => $adjustment->getAmount()
-                      ->multiply($order_item->getQuantity()),
-                    'included' => $adjustment->isIncluded(),
-                  ]);
-                  $adjustments[] = $multiplied_adjustment;
-                }
-
-                if ($cart_quantity > $coupon_quantity && $coupon_quantity !=0) {
-                    $multiplied_adjustment = new Adjustment([
-                      'type' => $adjustment->getType(),
-                      'label' => $adjustment->getLabel(),
-                      'source_id' => $adjustment->getSourceId(),
-                      'amount' => $adjustment->getAmount()
-                        ->multiply($coupon_quantity),
-                      'included' => $adjustment->isIncluded(),
-                    ]);
-                  $adjustments[] = $multiplied_adjustment;
-                }
-                elseif ($cart_quantity < $coupon_quantity || $coupon_quantity == 0) {
-                  $multiplied_adjustment = new Adjustment([
-                    'type' => $adjustment->getType(),
-                    'label' => $adjustment->getLabel(),
-                    'source_id' => $adjustment->getSourceId(),
-                    'amount' => $adjustment->getAmount()
-                      ->multiply($cart_quantity),
-                    'included' => $adjustment->isIncluded(),
-                  ]);
-                  $adjustments[] = $multiplied_adjustment;
-                }
-              }
+            $coupon_quantity = $config['quantity'];
+            if ($cart_quantity > $coupon_quantity) {
+              $multiplied_adjustment = new Adjustment([
+                'type' => $adjustment->getType(),
+                'label' => $adjustment->getLabel(),
+                'source_id' => $adjustment->getSourceId(),
+                'amount' => $adjustment->getAmount()
+                  ->multiply($coupon_quantity),
+                'included' => $adjustment->isIncluded(),
+              ]);
+              $adjustments[] = $multiplied_adjustment;
+            }
+            else {
+              $multiplied_adjustment = new Adjustment([
+                'type' => $adjustment->getType(),
+                'label' => $adjustment->getLabel(),
+                'source_id' => $adjustment->getSourceId(),
+                'amount' => $adjustment->getAmount()
+                  ->multiply($cart_quantity),
+                'included' => $adjustment->isIncluded(),
+              ]);
+              $adjustments[] = $multiplied_adjustment;
             }
           }
-          if($offer instanceof ProductFixedOff) {
-            $config = $offer->getConfiguration();
-            $offer_product_id = $config['product_id'];
-            $cart_quantity = $order_item->getQuantity();
-            if (!empty($coupon->getPromocodeQuantity())) {
-              $coupon_quantity = $coupon->getPromocodeQuantity();
-              if ($product_id == $offer_product_id) {
-                if ($coupon_quantity == 0) {
-                  $multiplied_adjustment = new Adjustment([
-                    'type' => $adjustment->getType(),
-                    'label' => $adjustment->getLabel(),
-                    'source_id' => $adjustment->getSourceId(),
-                    'amount' => $adjustment->getAmount(),
-                    'included' => $adjustment->isIncluded(),
-                  ]);
-                  $adjustments[] = $multiplied_adjustment;
-                }
-                if ($cart_quantity > $coupon_quantity && $coupon_quantity !=0) {
-                  if ($this->getTotalPrice()->getNumber() > $adjustment->getAmount()) {
-                    $multiplied_adjustment = new Adjustment([
-                      'type' => $adjustment->getType(),
-                      'label' => $adjustment->getLabel(),
-                      'source_id' => $adjustment->getSourceId(),
-                      'amount' => $adjustment->getAmount(),
-                      'included' => $adjustment->isIncluded(),
-                    ]);
-                    $adjustments[] = $multiplied_adjustment;
-                  }
-                  else {
-                    $multiplied_adjustment = new Adjustment([
-                      'type' => $adjustment->getType(),
-                      'label' => $adjustment->getLabel(),
-                      'source_id' => $adjustment->getSourceId(),
-                      'amount' => $this->getTotalPrice(),
-                      'included' => $adjustment->isIncluded(),
-                    ]);
-                    $adjustments[] = $multiplied_adjustment;
-                  }
-                }
-                elseif ($cart_quantity < $coupon_quantity || $coupon_quantity == 0) {
-                  if ($this->getTotalPrice()->getNumber() > $adjustment->getAmount()) {
-                    $multiplied_adjustment = new Adjustment([
-                      'type' => $adjustment->getType(),
-                      'label' => $adjustment->getLabel(),
-                      'source_id' => $adjustment->getSourceId(),
-                      'amount' => $adjustment->getAmount(),
-                      'included' => $adjustment->isIncluded(),
-                    ]);
-                    $adjustments[] = $multiplied_adjustment;
-                  }
-                  else {
-                    $multiplied_adjustment = new Adjustment([
-                      'type' => $adjustment->getType(),
-                      'label' => $adjustment->getLabel(),
-                      'source_id' => $adjustment->getSourceId(),
-                      'amount' => $this->getTotalPrice(),
-                      'included' => $adjustment->isIncluded(),
-                    ]);
-                    $adjustments[] = $multiplied_adjustment;
-                  }
-                }
-              }
+          if ($offer instanceof ProductQuantityFixedOff) {
+            $order_unit_price = $order_item->getUnitPrice()->getNumber();
+            $amount = str_replace("-", "", $adjustment->getAmount()->getNumber());
+            if ($order_unit_price > $amount) {
+              $multiplied_adjustment = new Adjustment([
+                'type' => $adjustment->getType(),
+                'label' => $adjustment->getLabel(),
+                'source_id' => $adjustment->getSourceId(),
+                'amount' => $adjustment->getAmount(),
+                'included' => $adjustment->isIncluded(),
+              ]);
+              $adjustments[] = $multiplied_adjustment;
+            }
+            elseif ($order_unit_price < $amount) {
+              $multiplied_adjustment = new Adjustment([
+                'type' => $adjustment->getType(),
+                'label' => $adjustment->getLabel(),
+                'source_id' => $adjustment->getSourceId(),
+                'amount' => $order_item->getUnitPrice(),
+                'included' => $adjustment->isIncluded(),
+              ]);
+              $adjustments[] = $multiplied_adjustment;
             }
           }
+        }
           else {
             $multiplied_adjustment = new Adjustment([
               'type' => $adjustment->getType(),
@@ -460,18 +401,6 @@ public function collectAdjustments() {
               'included' => $adjustment->isIncluded(),
             ]);
             $adjustments[] = $multiplied_adjustment;
-          }
-        }
-        else {
-          $multiplied_adjustment = new Adjustment([
-            'type' => $adjustment->getType(),
-            'label' => $adjustment->getLabel(),
-            'source_id' => $adjustment->getSourceId(),
-            'amount' => $adjustment->getAmount()
-              ->multiply($order_item->getQuantity()),
-            'included' => $adjustment->isIncluded(),
-          ]);
-          $adjustments[] = $multiplied_adjustment;
         }
       }
     }
diff --git a/docroot/modules/contrib/commerce/modules/product/src/Plugin/Commerce/PromotionOffer/ProductQuantityFixedOff.php b/docroot/modules/contrib/commerce/modules/product/src/Plugin/Commerce/PromotionOffer/ProductQuantityFixedOff.php
new file mode 100644
index 0000000..1e2bbce
--- /dev/null
+++ b/docroot/modules/contrib/commerce/modules/product/src/Plugin/Commerce/PromotionOffer/ProductQuantityFixedOff.php
@@ -0,0 +1,137 @@
+<?php
+
+namespace Drupal\commerce_product\Plugin\Commerce\PromotionOffer;
+
+use Drupal\commerce_price\RounderInterface;
+use Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer\FixedQuantityOffBase;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\commerce_price\Price;
+
+/**
+ * Provides a 'Product: Quantity Fixed off' offer.
+ *
+ * @CommercePromotionOffer(
+ *   id = "commerce_promotion_product_quantity_fixed_off",
+ *   label = @Translation("Fixed amount off each product along with quantity in the order"),
+ * )
+ */
+class ProductQuantityFixedOff extends FixedQuantityOffBase {
+
+  /**
+   * The product storage.
+   *
+   * @var \Drupal\Core\Entity\EntityStorageInterface
+   */
+  protected $productStorage;
+
+  /**
+   * Constructs a new ProductPercentageOff object.
+   *
+   * @param array $configuration
+   *   The plugin configuration, i.e. an array with configuration values keyed
+   *   by configuration option name. The special key 'context' may be used to
+   *   initialize the defined contexts by setting it to an array of context
+   *   values keyed by context names.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\commerce_price\RounderInterface $rounder
+   *   The rounder.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, RounderInterface $rounder, EntityTypeManagerInterface $entity_type_manager) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $rounder);
+
+    $this->productStorage = $entity_type_manager->getStorage('commerce_product');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('commerce_price.rounder'),
+      $container->get('entity_type.manager')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'product_id' => NULL,
+    ] + parent::defaultConfiguration();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function execute() {
+    $product_id = $this->configuration['product_id'];
+    if (empty($product_id)) {
+      return;
+    }
+
+    foreach ($this->getOrder()->getItems() as $order_item) {
+      /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
+      $purchasable_entity = $order_item->getPurchasedEntity();
+      if (!$purchasable_entity || $purchasable_entity->getEntityTypeId() != 'commerce_product_variation') {
+        continue;
+      }
+
+      /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $purchasable_entity */
+      if ($purchasable_entity->getProductId() == $product_id) {
+
+        $order_price = $order_item->getUnitPrice();
+        $currency_code = $order_price->getCurrencyCode();
+        if ($order_price < $this->getAmount()) {
+          $discount_price = new Price($order_price, $currency_code);
+        }
+        else {
+          $discount_price = new Price($this->getAmount(), $currency_code);
+        }
+        $adjustment_amount = $this->rounder->round($discount_price);
+
+        $this->applyAdjustment($order_item, $adjustment_amount);
+        break;
+      }
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+
+    $product = $this->productStorage->load($this->configuration['product_id']);
+    $form['product_id'] = [
+      '#type' => 'entity_autocomplete',
+      '#title' => $this->t('Product'),
+      '#default_value' => $product,
+      '#target_type' => 'commerce_product',
+      '#weight' => -10,
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    parent::submitConfigurationForm($form, $form_state);
+
+    $values = $form_state->getValue($form['#parents']);
+    $this->configuration['product_id'] = $values['product_id'];
+  }
+
+}
diff --git a/docroot/modules/contrib/commerce/modules/product/src/Plugin/Commerce/PromotionOffer/ProductQuantityPercentageOff.php b/docroot/modules/contrib/commerce/modules/product/src/Plugin/Commerce/PromotionOffer/ProductQuantityPercentageOff.php
new file mode 100644
index 0000000..bb65be3
--- /dev/null
+++ b/docroot/modules/contrib/commerce/modules/product/src/Plugin/Commerce/PromotionOffer/ProductQuantityPercentageOff.php
@@ -0,0 +1,130 @@
+<?php
+
+namespace Drupal\commerce_product\Plugin\Commerce\PromotionOffer;
+
+use Drupal\commerce_price\RounderInterface;
+use Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer\PercentageQuantityOffBase;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides a 'Product: Percentage off according to Quantity' offer.
+ *
+ * @CommercePromotionOffer(
+ *   id = "commerce_promotion_product_quantity_percentage_off",
+ *   label = @Translation("Percentage off each product along with quantity in the order"),
+ * )
+ */
+class ProductQuantityPercentageOff extends PercentageQuantityOffBase {
+
+  /**
+   * The product storage.
+   *
+   * @var \Drupal\Core\Entity\EntityStorageInterface
+   */
+  protected $productStorage;
+
+  /**
+   * Constructs a new ProductPercentageOff object.
+   *
+   * @param array $configuration
+   *   The plugin configuration, i.e. an array with configuration values keyed
+   *   by configuration option name. The special key 'context' may be used to
+   *   initialize the defined contexts by setting it to an array of context
+   *   values keyed by context names.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\commerce_price\RounderInterface $rounder
+   *   The rounder.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, RounderInterface $rounder, EntityTypeManagerInterface $entity_type_manager) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $rounder);
+
+    $this->productStorage = $entity_type_manager->getStorage('commerce_product');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('commerce_price.rounder'),
+      $container->get('entity_type.manager')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'product_id' => NULL,
+    ] + parent::defaultConfiguration();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function execute() {
+    $product_id = $this->configuration['product_id'];
+    if (empty($product_id)) {
+      return;
+    }
+
+    foreach ($this->getOrder()->getItems() as $order_item) {
+      /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
+      $purchasable_entity = $order_item->getPurchasedEntity();
+      if (!$purchasable_entity || $purchasable_entity->getEntityTypeId() != 'commerce_product_variation') {
+        continue;
+      }
+
+      /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $purchasable_entity */
+      if ($purchasable_entity->getProductId() == $product_id) {
+          $adjustment_amount = $order_item->getUnitPrice()->multiply($this->getAmount());
+        $adjustment_amount = $this->rounder->round($adjustment_amount);
+        $this->applyAdjustment($order_item, $adjustment_amount);
+        break;
+      }
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+
+    $product = NULL;
+    if (!empty($this->configuration['product_id'])) {
+      $product = $this->productStorage->load($this->configuration['product_id']);
+    }
+    $form['product_id'] = [
+      '#type' => 'entity_autocomplete',
+      '#title' => $this->t('Product'),
+      '#default_value' => $product,
+      '#target_type' => 'commerce_product',
+      '#weight' => -10,
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    parent::submitConfigurationForm($form, $form_state);
+
+    $values = $form_state->getValue($form['#parents']);
+    $this->configuration['product_id'] = $values['product_id'];
+  }
+
+}
diff --git a/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/FixedQuantityOffBase.php b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/FixedQuantityOffBase.php
new file mode 100644
index 0000000..998cd6a
--- /dev/null
+++ b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/FixedQuantityOffBase.php
@@ -0,0 +1,86 @@
+<?php
+
+namespace Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer;
+
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Provides the base class for fixed off offers.
+ */
+abstract class FixedQuantityOffBase extends PromotionOfferBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'amount' => 0,
+      'quantity' => 0,
+    ] +  parent::defaultConfiguration();
+  }
+
+  /**
+   * Gets the fixed amount, as a decimal, negated.
+   *
+   * @return string
+   *   The amount.
+   */
+  public function getAmount() {
+    return (string) $this->configuration['amount'];
+  }
+
+  public function getCouponQuantity() {
+    return (string) $this->configuration['quantity'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+    $form['amount'] = [
+      '#type' => 'commerce_number',
+      '#title' => $this->t('Amount'),
+      '#default_value' => $this->configuration['amount'],
+      '#maxlength' => 255,
+      '#required' => TRUE,
+      '#min' => 0,
+      '#size' => 5,
+    ];
+
+    $form['quantity'] = [
+      '#type' => 'commerce_number',
+      '#title' => $this->t('Quantity'),
+      '#default_value' => $this->configuration['quantity'],
+      '#maxlength' => 255,
+      '#required' => TRUE,
+      '#min' => 0,
+      '#size' => 5,
+    ];
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValue($form['#parents']);
+    if (empty($values['amount'])) {
+      $form_state->setError($form, $this->t('Fixed amount cannot be empty.'));
+    }
+    if (empty($values['quantity'])) {
+      $form_state->setError($form, $this->t('Quantity cannot be empty.'));
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValue($form['#parents']);
+    $this->configuration['amount'] = (string) ($values['amount']);
+    $this->configuration['quantity'] = (string) ($values['quantity']);
+    parent::submitConfigurationForm($form, $form_state);
+  }
+
+}
diff --git a/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/OrderPercentageQuantityOff.php b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/OrderPercentageQuantityOff.php
new file mode 100644
index 0000000..b8d31f1
--- /dev/null
+++ b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/OrderPercentageQuantityOff.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer;
+
+/**
+ * Provides an 'Order: Percentage Quantity off' condition.
+ *
+ * @CommercePromotionOffer(
+ *   id = "commerce_promotion_quantity_order_percentage_off",
+ *   label = @Translation("Percentage Quantity off on the order total"),
+ *   target_entity_type = "commerce_order",
+ * )
+ */
+class OrderPercentageQuantityOff extends PercentageQuantityOffBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function execute() {
+    $order = $this->getOrder();
+    if ($order->getTotalPrice()) {
+      $adjustment_amount = $order->getTotalPrice()->multiply($this->getAmount())->multiply($this->getCouponQuantity());
+      $adjustment_amount = $this->rounder->round($adjustment_amount);
+      $this->applyAdjustment($order, $adjustment_amount);
+    }
+  }
+
+}
diff --git a/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/PercentageQuantityOffBase.php b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/PercentageQuantityOffBase.php
new file mode 100644
index 0000000..7439fb1
--- /dev/null
+++ b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/PercentageQuantityOffBase.php
@@ -0,0 +1,94 @@
+<?php
+
+namespace Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer;
+
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Provides the base class for percentage off offers.
+ */
+abstract class PercentageQuantityOffBase extends PromotionOfferBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'amount' => 0,
+      'quantity' => 0,
+    ] + parent::defaultConfiguration();
+  }
+
+  /**
+   * Gets the percentage amount, as a decimal, negated.
+   *
+   * @return string
+   *   The amount.
+   */
+  public function getAmount() {
+    return (string) $this->configuration['amount'];
+  }
+
+  public function getCouponQuantity() {
+    return (string) $this->configuration['quantity'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form += parent::buildConfigurationForm($form, $form_state);
+
+    $form['amount'] = [
+      '#type' => 'commerce_number',
+      '#title' => $this->t('Percentage'),
+      '#default_value' => $this->configuration['amount'] * 100,
+      '#maxlength' => 255,
+      '#required' => TRUE,
+      '#min' => 0,
+      '#max' => 100,
+      '#size' => 4,
+      '#field_suffix' => $this->t('%'),
+    ];
+
+    $form['quantity'] = [
+      '#type' => 'commerce_number',
+      '#title' => $this->t('Quantity'),
+      '#default_value' => $this->configuration['quantity'],
+      '#maxlength' => 255,
+      '#required' => TRUE,
+      '#min' => 0,
+      '#max' => 100,
+      '#size' => 4,
+     // '#field_suffix' => $this->t(''),
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValue($form['#parents']);
+    if (empty($values['amount'])) {
+      $form_state->setError($form, $this->t('Percentage amount cannot be empty.'));
+    }
+    if (empty($values['quantity'])) {
+      $form_state->setError($form, $this->t('Quantity cannot be empty'));
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    parent::submitConfigurationForm($form, $form_state);
+
+    $values = $form_state->getValue($form['#parents']);
+    $this->configuration['amount'] = (string) ($values['amount'] / 100);
+    $this->configuration['quantity'] = (string) ($values['quantity']);
+    parent::submitConfigurationForm($form, $form_state);
+  }
+
+}
