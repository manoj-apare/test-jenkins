From c6840ce6859e8b6a0ed25aabbdd7868846ce0628 Mon Sep 17 00:00:00 2001
From: Ben McClure <ben.mcclure@gmail.com>
Date: Sun, 16 Apr 2017 00:50:20 -0500
Subject: [PATCH] by bmcclure: Base profile reuse functionality in
 ProfileSelect element

---
 modules/order/src/Element/ProfileSelect.php | 120 ++++++++++++++++++++++++++--
 1 file changed, 114 insertions(+), 6 deletions(-)

diff --git a/modules/order/src/Element/ProfileSelect.php b/modules/order/src/Element/ProfileSelect.php
index 3b09fb1..c915c23 100644
--- a/modules/order/src/Element/ProfileSelect.php
+++ b/modules/order/src/Element/ProfileSelect.php
@@ -3,9 +3,13 @@
 namespace Drupal\commerce_order\Element;
 
 use Drupal\commerce\Element\CommerceElementBase;
+use Drupal\Component\Utility\Html;
+use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Render\Element;
 use Drupal\profile\Entity\ProfileInterface;
+use Symfony\Component\HttpFoundation\Request;
 
 /**
  * Provides a form element for selecting a customer profile.
@@ -17,6 +21,9 @@
  *   '#default_value' => $profile,
  *   '#default_country' => 'FR',
  *   '#available_countries' => ['US', 'FR'],
+ *   '#reuse_profile_label' => $this->t('My billing address is the same as my shipping address.'),
+ *   '#reuse_profile_source' => 'commerce_shipping_get_shipping_profile',
+ *   '#reuse_profile_default' => FALSE,
  * ];
  * @endcode
  * To access the profile in validation or submission callbacks, use
@@ -37,6 +44,12 @@ public function getInfo() {
       '#default_country' => NULL,
       // A list of country codes. If empty, all countries will be available.
       '#available_countries' => [],
+      // The label for the reuse profile checkbox. If empty, checkbox is hidden.
+      '#reuse_profile_label' => NULL,
+      // The function to call to return the profile to reuse.
+      '#reuse_profile_source' => NULL,
+      // Whether the reuse checkbox should be checked by default.
+      '#reuse_profile_default' => FALSE,
 
       // The profile entity operated on. Required.
       '#default_value' => NULL,
@@ -83,7 +96,18 @@ public static function processForm(array $element, FormStateInterface $form_stat
       throw new \InvalidArgumentException('The commerce_profile_select #available_countries property must be an array.');
     }
 
+    $ajax_wrapper_id = Html::getUniqueId('profile-select-ajax-wrapper');
+    $element['#prefix'] = '<div id="' . $ajax_wrapper_id . '">';
+    $element['#suffix'] = '</div>';
+
+    $storage = $form_state->getStorage();
     $element['#profile'] = $element['#default_value'];
+    $reuse_profile = (isset($storage['pane_' . $element['#name']]['reuse_profile']))
+      ? $storage['pane_' . $element['#name']]['reuse_profile']
+      : $element['#reuse_profile_default'];
+    $storage['pane_' . $element['#name']]['reuse_profile'] = $reuse_profile;
+    $form_state->setStorage($storage);
+
     $form_display = EntityFormDisplay::collectRenderDisplay($element['#profile'], 'default');
     $form_display->buildForm($element['#profile'], $element, $form_state);
     if (!empty($element['address']['widget'][0])) {
@@ -100,6 +124,30 @@ public static function processForm(array $element, FormStateInterface $form_stat
       }
     }
 
+    $called_class = get_called_class();
+    $reuse_enabled = (!empty($element['#reuse_profile_label']) && !empty($element['#reuse_profile_source']));
+    if ($reuse_enabled) {
+      $element['reuse_profile'] = [
+        '#title' => $element['#reuse_profile_label'],
+        '#type' => 'checkbox',
+        '#weight' => -5,
+        '#default_value' => $reuse_profile,
+        '#ajax' => [
+          'callback' => [$called_class, 'reuseProfileAjax'],
+          'wrapper' => $ajax_wrapper_id,
+        ],
+        '#element_validate' => [[$called_class, 'reuseProfileValidate']]
+      ];
+    }
+
+    if ($reuse_profile) {
+      foreach (Element::children($element) as $key) {
+        if (!in_array($key, ['reuse_profile'])) {
+          $element[$key]['#access'] = FALSE;
+        }
+      }
+    }
+
     return $element;
   }
 
@@ -116,9 +164,13 @@ public static function processForm(array $element, FormStateInterface $form_stat
    *   form, as a protection against buggy behavior.
    */
   public static function validateForm(array &$element, FormStateInterface $form_state) {
-    $form_display = EntityFormDisplay::collectRenderDisplay($element['#profile'], 'default');
-    $form_display->extractFormValues($element['#profile'], $element, $form_state);
-    $form_display->validateFormValues($element['#profile'], $element, $form_state);
+    $pane_id = $element['#name'];
+    $storage = $form_state->getStorage();
+    if (!isset($storage['pane_' . $pane_id]['reuse_profile']) || !$storage['pane_' . $pane_id]['reuse_profile']) {
+      $form_display = EntityFormDisplay::collectRenderDisplay($element['#profile'], 'default');
+      $form_display->extractFormValues($element['#profile'], $element, $form_state);
+      $form_display->validateFormValues($element['#profile'], $element, $form_state);
+    }
   }
 
   /**
@@ -130,9 +182,65 @@ public static function validateForm(array &$element, FormStateInterface $form_st
    *   The current state of the form.
    */
   public static function submitForm(array &$element, FormStateInterface $form_state) {
-    $form_display = EntityFormDisplay::collectRenderDisplay($element['#profile'], 'default');
-    $form_display->extractFormValues($element['#profile'], $element, $form_state);
-    $element['#profile']->save();
+    $pane_id = $element['#name'];
+    $storage = $form_state->getStorage();
+    if (isset($storage['pane_' . $pane_id]['reuse_profile']) && $storage['pane_' . $pane_id]['reuse_profile']) {
+      if (is_numeric($element['#reuse_profile_source'])) {
+        // Load profile by ID
+        $profile = \Drupal::entityTypeManager()
+          ->getStorage('profile')
+          ->load($element['#reuse_profile_source']);
+      }
+      else {
+        // Load profile from a callback
+        $profile = call_user_func($element['#reuse_profile_source'], $element, $form_state, $form_state->getCompleteForm());
+      }
+
+      $element['#profile'] = $profile;
+    } else {
+      $form_display = EntityFormDisplay::collectRenderDisplay($element['#profile'], 'default');
+      $form_display->extractFormValues($element['#profile'], $element, $form_state);
+      $element['#profile']->save();
+    }
+  }
+
+  /**
+   * Reuse profile AJAX callback.
+   *
+   * @param array $form
+   *   The complete form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   The Request object.
+   *
+   * @return array
+   *   The form element replace the wrapper with.
+   */
+  public static function reuseProfileAjax(array &$form, FormStateInterface $form_state, Request $request) {
+    $triggering_element = $form_state->getTriggeringElement();
+    $array_parents = $triggering_element['#array_parents'];
+    array_pop($array_parents);
+    return NestedArray::getValue($form, $array_parents);
+  }
+
+  /**
+   * The #element_validate callback for the reuse profile checkbox.
+   *
+   * @param array $element
+   *   The form element.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  public static function reuseProfileValidate(array $element, FormStateInterface $form_state) {
+    $form = $form_state->getCompleteForm();
+    $profile_element_parents = $element['#parents'];
+    array_pop($profile_element_parents);
+    $profile_element = NestedArray::getValue($form, $profile_element_parents);
+    $pane_id = $profile_element['#name'];
+    $storage = $form_state->getStorage();
+    $storage['pane_' . $pane_id]['reuse_profile'] = $element['#value'];
+    $form_state->setStorage($storage);
   }
 
 }
