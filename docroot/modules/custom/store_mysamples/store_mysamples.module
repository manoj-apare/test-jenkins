<?php

/**
 * @file
 * Contains store_mysamples.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Query;
use Drupal\commerce_promotion\Entity\Promotion;
use Drupal\commerce_promotion\Entity\Coupon;
use Drupal\profile\Entity\Profile;

/**
 * Implements hook_help().
 */
function store_mysamples_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the store_mysamples module.
    case 'help.page.store_mysamples':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('MySamples Integration for Store') . '</p>';
      return $output;

    default:
  }
}

/**
 * {@inheritdoc}
 */
function store_mysamples_form_yamlform_submission_promocode_form_alter(&$form, $form_state) {
  $current_path = \Drupal::service('path.current')->getPath();
  $elements_to_hide = [
    'approver_mail',
    'custom_emails',
    'requester',
    'approver',
    'discount_amount',
    'promo_code',
    'requester_mail',
    'action_links',
    'approver_subject',
    'requester_subject',
    'approver_mail_statement',
    'requester_mail_statement',
    'add_to_cart_link',
    'mpn_id',
  ];
  if (preg_match('/yamlform\/manage\/promocode\/submission\/\d+\/edit$/', $current_path)) {
    $promocode_status_value = $form['elements']['promocode_status']['#default_value'];
    if ($promocode_status_value != 'Modify' && $promocode_status_value != '') {
      $form['actions']['submit']['#disabled'] = TRUE;
      $form['actions']['submit']['#suffix'] = 'Promocode is been ' . lcfirst($promocode_status_value) . ', so can\'t been submitted again';
    }
    $op = \Drupal::request()->query->get('op');
    if (!empty($op)) {
      $promocode_status_value = $op;
      $form['#attached']['library'][] = 'store_mysamples/promocode-submission';
    }
    switch ($op) {
      case 'approve':
        $promocode_status_value = 'Approved';
        break;

      case 'reject':
        $promocode_status_value = 'Rejected';
        break;

      case 'modify':
        $promocode_status_value = 'Modify';
        break;
    }
    $form['elements']['promocode_status']['#default_value'] = $promocode_status_value;

    if ($op == 'modify' || $op == 'Modify') {
      $elements_to_hide[] = 'promocode_status';
    }
    else {
      array_push(
        $elements_to_hide,
        'quantity',
        'customer',
        'end_user',
        'production_date',
        'opportunity_registration',
        'project_name',
        'application',
        'annual_volume',
        'cypress_fae_fse',
        'additional_details',
        'customer_part_number',
        'purchase_order_number',
        'organization'
      );
    }

    $form['actions']['submit']['#submit'][] = 'store_mysamples_send_approval_mail';
  }
  // fern: create a promocode.
  else {
    $elements_to_hide[] = 'promocode_status';
    $mpn = \Drupal::request()->query->get('mpn');
    $cat = \Drupal::request()->query->get('cat');
    $sample_status = \Drupal::request()->query->get('sstatus');
    $mpnid = \Drupal::request()->query->get('mpnid');

    // If CAT B check kit or silicon.
    switch ($cat) {
      case 'cat-b':
        $cat = 'cat_b';
        break;

      case 'cat-b-kit':
        $cat = 'cat_b_kit';
        break;

      default:
        $cat = 'cat_a';
        break;
    }

    $form['elements']['mpn_id']['#value'] = $mpnid;
    $form['elements']['type']['#value'] = $cat;
  }
  array_unshift($form['actions']['submit']['#submit'], 'store_mysamples_promocode_submit_form');
  foreach ($elements_to_hide as $element) {
    $form['elements'][$element]['#access'] = FALSE;
  }

}

/**
 * {@inheritdoc}
 */
function store_mysamples_promocode_submit_form($form, FormStateInterface $form_state) {

  $form_values = $form_state->getValues();
  $cat = $form_values['type'];
  $approvers = [];
  $discount_amount = 0;
  $promocode = '';
  $msrp = 0;

  $get_mpnid = $form_values['mpn_id'];

  if ($cat == 'cat_a') {
    // Todo verified catA approvers.
    // Query to get approver mail for CAT A.
    $query = \Drupal::database()->select('shope_code_approvers__626119b36b', 'pa');
    $query->fields('pa', ['field_shopcodeprimaryapprover_value']);
    $query->fields('sa', ['field_shopcodesecondaryapprover_value']);
    $query->leftjoin('shope_code_approvers__e894aeed15', 'sa', 'pa.entity_id = sa.entity_id and pa.revision_id = sa.revision_id');
    $query->leftjoin('shope_code_approvers__field_country_id', 'ci', 'pa.entity_id = ci.entity_id and pa.revision_id = ci.revision_id');
    $query->condition('ci.field_country_id_value', $form_values['region']);
    $results = $query->execute()->fetchAll();

    foreach ($results as $result) {
      if (!empty($result->field_shopcodeprimaryapprover_value)) {
        $approvers[] = $result->field_shopcodeprimaryapprover_value;
      }
      if (!empty($result->field_shopcodesecondaryapprover_value)) {
        $approvers[] = $result->field_shopcodesecondaryapprover_value;
      }
    }

    // Query to get mpn details for CAT A.
    // Todo mpnid should be from part produt view(reminder).
    $query = \Drupal::database()->select('commerce_product', 'cp');
    $query->fields('cp', ['product_id']);
    $query->join('commerce_product__field_price_one', 'p1', 'p1.entity_id = cp.product_id');
    $query->fields('p1', ['field_price_one_value']);
    $query->join('commerce_product__field_price_two', 'p2', 'p2.entity_id = cp.product_id');
    $query->fields('p2', ['field_price_two_value']);
    $query->join('commerce_product__field_price_three', 'p3', 'p3.entity_id = cp.product_id');
    $query->fields('p3', ['field_price_three_value']);
    $query->join('commerce_product__field_price_four', 'p4', 'p4.entity_id = cp.product_id');
    $query->fields('p4', ['field_price_four_value']);
    $query->join('commerce_product__field_price_five', 'p5', 'p5.entity_id = cp.product_id');
    $query->fields('p5', ['field_price_five_value']);
    $query->join('commerce_product__field_price_six', 'p6', 'p6.entity_id = cp.product_id');
    $query->fields('p6', ['field_price_six_value']);
    $query->join('commerce_product__field_mpn_id', 'cpmpnid', 'cpmpnid.entity_id = cp.product_id');
    $query->condition('cpmpnid.field_mpn_id_value', $get_mpnid);
    $results = $query->execute()->fetchAll();

    foreach ($results as $result) {
      $mpn_details = $result;
    }
    // Calculate discount based on quantity.
    if ($form_values['quantity'] <= 9) {
      $discount_price_per_unit = round($mpn_details->field_price_one_value, 2);
    }
    elseif ($form_values['quantity'] >= 10 and $form_values['quantity'] <= 24) {
      $discount_price_per_unit = round($mpn_details->field_price_two_value, 2);
    }
    elseif ($form_values['quantity'] >= 25 and $form_values['quantity'] <= 99) {
      $discount_price_per_unit = round($mpn_details->field_price_three_value, 2);
    }
    elseif ($form_values['quantity'] >= 100 and $form_values['quantity'] <= 249) {
      $discount_price_per_unit = round($mpn_details->field_price_four_value, 2);
    }
    elseif ($form_values['quantity'] >= 250 and $form_values['quantity'] <= 999) {
      $discount_price_per_unit = round($mpn_details->field_price_five_value, 2);
    }
    else {
      $discount_price_per_unit = round($mpn_details->field_price_six_value, 2);
    }
    $msrp = $discount_price_per_unit;
  }
  else {
    // Query to get mpn details for CAT B kit.
    $query = \Drupal::database()->select('commerce_product', 'cp');
    $query->fields('cp', ['product_id']);
    $query->join('commerce_product__field_mpn_id', 'mpn', 'cp.product_id = mpn.entity_id');
    $query->fields('mpn', ['field_mpn_id_value']);
    $query->leftjoin('commerce_product__field_samplemsrp', 'msrp', 'cp.product_id = msrp.entity_id');
    $query->fields('msrp', ['field_samplemsrp_value']);
    $query->leftjoin('commerce_product__field_kit_cost', 'kc', 'cp.product_id = kc.entity_id');
    $query->fields('kc', ['field_kit_cost_value']);
    $query->join('commerce_product__field_active', 'ac', 'cp.product_id = ac.entity_id');
    $query->fields('ac', ['field_active_value']);
    $query->condition('mpn.field_mpn_id_value', $get_mpnid, '=');
    $query->condition('ac.field_active_value', 1);
    $results = $query->execute()->fetchAll();

    foreach ($results as $result) {
      $mpn_details = $result;
    }

    // Todo verified CATB Approvers.
    // Calculate kit amount for CAT B kit.
    if (!empty($form_values['organization'])) {
      $query = \Drupal::database()->select('shope_code_approvers__field_kitapprover', 'ka');
      $query->fields('pa', ['field_shopcodeprimaryapprover_value']);
      $query->fields('sa', ['field_shopcodesecondaryapprover_value']);
      $query->fields('ta', ['field_shopcodethirdapprover_value']);
      $query->fields('ka', ['field_kitapprover_value']);
      $query->leftjoin('shope_code_approvers__626119b36b', 'pa', 'ka.entity_id = pa.entity_id and ka.revision_id = pa.revision_id');
      $query->leftjoin('shope_code_approvers__e894aeed15', 'sa', 'ka.entity_id = sa.entity_id and ka.revision_id = sa.revision_id');
      $query->leftjoin('shope_code_approvers__5d7baf98f6', 'ta', 'ka.entity_id = ta.entity_id and ka.revision_id = ta.revision_id');
      $query->condition('ka.field_kitapprover_value', $form_values['organization']);
      $results = $query->execute()->fetchAll();

      foreach ($results as $result) {
        if (!empty($result->primary_approver)) {
          $approvers[] = $result->field_shopcodeprimaryapprover_value;
        }
        if (!empty($result->secondary_approver)) {
          $approvers[] = $result->field_shopcodesecondaryapprover_value;
        }
        if (!empty($result->third_approver)) {
          $approvers[] = $result->field_shopcodethirdapprover_value;
        }
      }
      $msrp = $mpn_details->field_kit_cost_value;
    }

    // Calculate discount amount for CAT B silicon.
    else {
      $query = \Drupal::database()->select('shope_code_approvers__626119b36b', 'pa');
      $query->fields('pa', ['field_shopcodeprimaryapprover_value']);
      $query->fields('sa', ['field_shopcodesecondaryapprover_value']);
      $query->leftjoin('shope_code_approvers__e894aeed15', 'sa', 'pa.entity_id = sa.entity_id and pa.revision_id = sa.revision_id');
      $query->join('shope_code_approvers__field_cat_a_b', 'cat', 'pa.entity_id = cat.entity_id and pa.revision_id = cat.revision_id and cat.field_cat_a_b_value = \'B\'');
      $query->join('shope_code_approvers__field_mpnid', 'mpnid', 'pa.entity_id = mpnid.entity_id and pa.revision_id = mpnid.revision_id');
      $query->condition('mpnid.field_mpnid_value', $get_mpnid);
      $results = $query->execute()->fetchAll();

      foreach ($results as $result) {
        if (!empty($result->field_shopcodeprimaryapprover_value)) {
          $approvers[] = $result->field_shopcodeprimaryapprover_value;
        }
        if (!empty($result->field_shopcodesecondaryapprover_value)) {
          $approvers[] = $result->field_shopcodesecondaryapprover_value;
        }
      }
      $msrp = $mpn_details->field_samplemsrp_value;
    }
  }

  if (empty($approvers)) {
    $approvers[] = '259045696';
  }
  $approver_ids = implode(',', $approvers);
  $delegate = [];

  // Check whether approvers are on leave and delegate set.
  $query = \Drupal::database()->query('select
    case when del.start_date <= ' . strtotime('now') . ' and del.end_date >= ' . strtotime('-1day') . '
    then del.delegate_legacy_id
    else del.legacy_id
    end as approver
    from delegation_info del
    where del.legacy_id in (' . $approver_ids . ')');

  $results = $query->fetchAll();
  foreach ($results as $result) {
    $delegate[] = $result->approver;
  }

  $approvers = array_unique(array_merge($approvers, $delegate));

  $query = \Drupal::database()->select('users_field_data', 'u');
  $query->fields('u', ['mail']);
  $query->join('user__field_legacy_uid', 'luid', 'luid.entity_id = u.uid');
  $query->leftjoin('user__field_first_name', 'fn', 'luid.entity_id = fn.entity_id');
  $query->fields('fn', ['field_first_name_value']);
  $query->leftJoin('user__field_last_name', 'ln', 'luid.entity_id = ln.entity_id');
  $query->fields('ln', ['field_last_name_value']);
  $query->condition('luid.field_legacy_uid_value', $approvers, 'in');
  $results = $query->execute()->fetchAll();
  $approvers_mail = [];
  $approvers_name = [];
  $name = '';
  foreach ($results as $result) {
    $approvers_mail[] = $result->mail;
    $approvers_name[] = $result->mail;
    $name .= $result->field_first_name_value . ' ' . $result->field_last_name_value . ', ';
  }
  $name = substr(trim($name), 0, -1);
  $discount_amount = $msrp * $form_values['quantity'];
  $current_user = User::load(\Drupal::currentUser()->id());
  $user_name = $current_user->getEmail();

  // Query to get approver divison code.
  $query = \Drupal::database()->select('user__field_division_code', 'ud');
  $query->fields('ud', ['field_division_code_value']);
  $query->join('user__field_legacy_uid', 'luid', 'luid.entity_id = ud.entity_id');
  $query->condition('luid.field_legacy_uid_value', $approvers[0]);
  $results = $query->execute()->fetchAll();
  $user_division_code = '';
  foreach ($results as $result) {
    $user_division_code = $result->field_division_code_value;
  }
  // Set the date in email description.
  $expire_date = date('m-d-y', strtotime("+7 days"));

  // Generate promocode.
  if (!isset($form_values['promo_code']) || empty($form_values['promo_code'])) {
    $promocode = $user_division_code . date('y') . date('W') . date('N') . mt_rand(001, 99999);

    // Prepend 'KIT' to promo code, if the item is kits.
    if (!empty($form_values['organization'])) {
      $promocode = 'KIT' . $promocode;
      $form_state->setValue('promo_code', $promocode);
    }
    else {
      $form_state->setValue('promo_code', $promocode);
    }
  }
  $approver_subject = 'Request to Approve Promo Code';
  $requester_subject = 'Request For Promo Code Successfully Sent';
  $action_links = 'width: 32%; display: inline-block; text-align: center;';
  $approver_mail_statement = 'You have a request to approve promo code ' . $promocode . '. The details of the request are indicated below on this email. Please click on the links below to approve or reject the request. You may also change some of the details of the request by clicking on the modify link.';
  $requester_mail_statement = 'Thank you. Your request for promo code ' . $promocode . ' has been routed for approval.Please check with the approver on the status of your request.Your promo code will not work until the approver has approved this request.';
  $add_to_cart_link = 'display: none;';
  $approved_second_sentence = '';

  // To get the product_id for Promotions.
  $query = \Drupal::database()->select('commerce_product_field_data', 'cp');
  $query->fields('cp', ['product_id']);
  $query->condition('cp.title', $form_values['part_number']);
  $results = $query->execute()->fetchAll();
  $product_id = $results[0]->product_id;
  $form_state->setValue('expire_date', 0);

  switch ($form_values['promocode_status']) {
    case 'Approved':

      // Create custom Promotion for each promocode.
      $promotion_with_coupon = Promotion::create([
        'name' => $form_values['part_number'],
        'order_types' => 'default',
        'stores' => 1,
        'status' => TRUE,
        'end_date' => date('Y-m-d', strtotime("+7 days")),
        'offer' => [
          'target_plugin_id' => 'commerce_promotion_product_quantity_fixed_off',
          'target_plugin_configuration' => [
            'product_id' => $product_id,
            'amount' => $msrp,
            'quantity' => $form_values['quantity'],
          ],
        ],
        'usage_limit' => 1,
      ]);
      $promotion_with_coupon->save();
      // ->setEndDate(new DrupalDateTime($expire_date));
      // Coupon Creation.
      $coupon = Coupon::create([
        'code' => $form_values['promo_code'],
        'usage_limit' => 1,
        'status' => TRUE,
      ]);
      $coupon->save();
      $promotion_with_coupon->get('coupons')->appendItem($coupon);
      $promotion_with_coupon->save();

      $approved_second_sentence = '. Please note that this promo code is set to expire on ' . $expire_date . ' so please make sure to enter your order before then.';

      // Add to cart be shown to all cat A, cat B kit & cat B silicon approved
      // mails.
      if ($cat != 'cat_a') {
        $add_to_cart_link = 'width: 32%; display: inline-block; text-align: left;';
      }
      $form_state->setValue('expire_date', strtotime("+7 days"));

    case 'Rejected':
      $approver_mail_statement = 'Promo code ' . $form_values['promo_code'] . ' has been ' . $form_values['promocode_status'] . $approved_second_sentence;
      $requester_mail_statement = 'Request for ' . $form_values['promo_code'] . ' has been ' . $form_values['promocode_status'];
      $approver_subject = '[' . $form_values['promocode_status'] . '] ' . $approver_subject;
      $requester_subject = '[' . $form_values['promocode_status'] . '] ' . $requester_subject;
      $action_links = 'display: none;';
      drupal_set_message('Promocode is been ' . $form_values['promocode_status']);
      break;

    case 'Modify':
      $approver_subject = '[Modified] ' . $approver_subject;
      $requester_subject = '[Modified] ' . $requester_subject;
      break;
  }
  if (!empty($mpnid)) {
    $form_state->setValue('mpn_id', $mpnid);
  }
  $form_state->setValue('add_to_cart_link', $add_to_cart_link);
  $form_state->setvalue('approver_mail_statement', $approver_mail_statement);
  $form_state->setValue('requester_mail_statement', $requester_mail_statement);
  $form_state->setValue('approver_subject', $approver_subject);
  $form_state->setValue('requester_subject', $requester_subject);
  $form_state->setValue('action_links', $action_links);
  $form_state->setValue('requester', $user_name);
  $form_state->setValue('requester_mail', $current_user->getEmail());
  $form_state->setValue('approver_mail', implode(', ', $approvers_mail));
  $form_state->setValue('approver', implode(', ', $approvers_name));
  $form_state->setValue('discount_amount', $discount_amount);
  $form_state->setValue('created_date', strtotime("now"));
  $form_state->setValue('approver_name', $name);
  $form_state->setValue('reminder_status', 0);
}

/**
 * Additional submit handler to send promocode approval/rejection mail.
 *
 * @param mixed $form
 *   Form.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function store_mysamples_send_approval_mail($form, FormStateInterface $form_state) {
  $form_values = $form_state->getValues();
  if ($form_values['promocode_status'] == 'Approved'
    || $form_values['promocode_status'] == 'Rejected'
    || $form_values['promocode_status'] == 'Modify') {
    $yaml_form_submission = $form_state->getBuildInfo()['callback_object'];
    $yaml_form_submission_entity = $yaml_form_submission->getEntity();
    $yaml_form = $yaml_form_submission_entity->getYamlForm();
    $yaml_form_handlers = $yaml_form->getHandlers();
    $yaml_form_handler_ids = $yaml_form_handlers->getInstanceIds();
    foreach ($yaml_form_handler_ids as $yaml_form_handler_id) {
      $yaml_email_handler = $yaml_form_handlers->get($yaml_form_handler_id);
      $yaml_form_submission_data = $yaml_email_handler->getMessage($yaml_form_submission_entity);
      $yaml_email_handler->sendMessage($yaml_form_submission_data);
    }
  }
}

/**
 * To map the first_name, last_name and roles for simplesamlphp.
 */
function get_saml_user_attributes($account) {
 // \Drupal::logger('customfunction')->notice(print_r($account, TRUE));
  $user_act_id = $account->id();
  $user_object = User::load($user_act_id);
  $saml_attribute = \Drupal::service('simplesamlphp_auth.manager')->getAttributes();
  $saml_role_ids = $saml_attribute['roles'];
  $saml_mail = $saml_attribute['mail'][0];
  $user_get_roles = $user_object->get('roles')->getValue();
  $user_roles = array(
    '11' => 'administrator',
    '21' => 'cypress_employees',
    '106' => 'mysites',
    '111' => 'all_distributors',
    '116' => 'sales_rep',
    '141' => 'blog_owner',
    '16' => 'business_unit_manager',
    '26' => 'corporate_marketing_vp',
    '76' => 'design_partner',
    '81' => 'direct_representative',
    '86' => 'direct_sales',
    '161' => 'endurance',
    '96' => 'forum_moderator',
    '156' => 'it_accounts',
    '146' => 'it_team',
    '51' => 'limited_web_editor',
    '31' => 'marcom_director',
    '36' => 'marketing_evp',
    '101' => 'pre_authenticated_user',
    '151' => 'trusted_forum_users',
    '91' => 'university_professor',
    '41' => 'web_editor',
    '56' => 'web_marketing',
    '61' => 'web_marketing_manager',
    '46' => 'wrb_chairman',
    '121' => 'cypros',
    '126' => 'page_administrator',
    '131' => 'subsite_administrator',
    '136' => 'web_contractors',
  );
  if (empty($user_get_roles)) {
    foreach ($saml_role_ids as $saml_role_id) {
      if ($saml_role_id == 2) {
        continue;
      }
      if (isset($user_roles[$saml_role_id])) {
        $user_object->addRole($user_roles[$saml_role_id]);
      }
    }
    if($saml_mail == 'robyn.weil@cypress.com' || $saml_mail == 'kavitha.dc@cypress.com' || $saml_mail == 'basker.singarapu@cypress.com' || $saml_mail == 'bobby.john@cypress.com' || $saml_mail == 'animesh.ranjan@cypress.com') {
      $user_object->addRole('cypress_operations');
    }
  }
  elseif (!empty($user_get_roles)) {
    foreach ($user_get_roles as $user_get_role) {
      if (!in_array($user_get_role['target_id'], $saml_role_ids)) {
        $remove_role = $user_get_role['target_id'];
        $user_object->removeRole($remove_role);
      }
      elseif ($key = array_search($user_get_role['target_id'], $saml_role_ids)) {
        unset($saml_role_ids[$key]);
      }
    }
    foreach ($saml_role_ids as $saml_role_id) {
      if (isset($user_roles[$saml_role_id])) {
        $user_object->addRole($user_roles[$saml_role_id]);
      }
    }
    if($saml_mail == 'robyn.weil@cypress.com' || $saml_mail == 'kavitha.dc@cypress.com' || $saml_mail == 'basker.singarapu@cypress.com' || $saml_mail == 'bobby.john@cypress.com' || $saml_mail == 'animesh.ranjan@cypress.com') {
      $user_object->addRole('cypress_operations');
    }
  }
  $sso_legacy_id = $saml_attribute['username'][0];
  $uid = explode('_', $sso_legacy_id);
  $division_code = $uid[0];
  $legacy_user_id = $uid[1];

  if (!empty($division_code)) {
    $user_object->set("field_division_code", $division_code);
  }
  else {
    $user_object->set("field_division_code", $sso_legacy_id);
  }
  if ($saml_mail == 'brijtp2@cypress.com') {
    $user_object->set("field_legacy_uid", '123456');
  }
  if (!empty($legacy_user_id)) {
    $user_object->set("field_legacy_uid", $legacy_user_id);
    $sso_legacy_id = $legacy_user_id;
  }
  elseif (!empty($sso_legacy_id)) {
    // Get the legacy id from this table.
    $query = \Drupal::database()->select('migrate_d7_legacy_id', 'mli');
    $query->fields('mli', ['legacy_id']);
    $query->condition('mli.user_mail', $saml_mail);
    $results = $query->execute()->fetchAll();
    foreach ($results as $result) {
      $legacy_id = $result->legacy_id;
    }
    $user_object->set("field_legacy_uid", $legacy_id);
    $sso_legacy_id = $legacy_id;
  }
  $user_object->set("field_first_name", $saml_attribute['firstName'][0]);
  $user_object->set("field_last_name", $saml_attribute['lastName'][0]);
  $user_object->save();

  // Set the user id for empty profiles (for Address book migration).
  $query = Drupal::database()->select('profile__field_user_legacy_id', 'pluid');
  $query->fields('pluid', ['entity_id']);
  $query->condition('pluid.field_user_legacy_id_value', $sso_legacy_id);
  $results = $query->execute()->fetchAll();
  foreach ($results as $result) {
    $profile_id = $result->entity_id;
    $profile = Profile::load($profile_id);
    if ($profile->uid != $sso_legacy_id) {
      $profile->uid = $user_act_id;
      $profile->save();
    }
  }
}

/**
 * Implements hook_mail().
 */
function store_mysamples_mail($key, &$message, $params) {
  \Drupal::logger('reminder status')->notice($params['title']);
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'reminder_status':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['title']), $options);
      $message['body'][] = $params['message'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }

}
